// Code generated by MockGen. DO NOT EDIT.
// Source: consensus/tendermint/core/core_backend.go

// Package core is a generated GoMock package.
package core

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	ethcore "go-smilo/src/blockchain/smilobft/core"
	types "go-smilo/src/blockchain/smilobft/core/types"
	reflect "reflect"
)

// AskSync mocks base method
func (m *MockBackend) AskSync(header *types.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AskSync", header)
}

// AskSync indicates an expected call of AskSync
func (mr *MockBackendMockRecorder) AskSync(header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskSync", reflect.TypeOf((*MockBackend)(nil).AskSync), header)
}

// Broadcast mocks base method
func (m *MockBackend) Broadcast(ctx context.Context, committee types.Committee, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", ctx, committee, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockBackendMockRecorder) Broadcast(ctx, committee, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockBackend)(nil).Broadcast), ctx, committee, payload)
}


// Gossip mocks base method
func (m *MockBackend) Gossip(ctx context.Context, committee types.Committee, payload []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Gossip", ctx, committee, payload)
}

// Gossip indicates an expected call of Gossip
func (mr *MockBackendMockRecorder) Gossip(ctx, committee, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gossip", reflect.TypeOf((*MockBackend)(nil).Gossip), ctx, committee, payload)
}



// Post mocks base method
func (m *MockBackend) RemoveMessageFromLocalCache(payload []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveMessageFromLocalCache", payload)
}

// Post indicates an expected call of Post
func (mr *MockBackendMockRecorder) RemoveMessageFromLocalCache(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMessageFromLocalCache", reflect.TypeOf((*MockBackend)(nil).RemoveMessageFromLocalCache), payload)
}


// BlockChain mocks base method
func (m *MockBackend) BlockChain() *ethcore.BlockChain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockChain")
	ret0, _ := ret[0].(*ethcore.BlockChain)
	return ret0
}

// BlockChain indicates an expected call of BlockChain
func (mr *MockBackendMockRecorder) BlockChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockChain", reflect.TypeOf((*MockBackend)(nil).BlockChain))
}

// SetBlockchain mocks base method
func (m *MockBackend) SetBlockchain(bc *ethcore.BlockChain) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBlockchain", bc)
}

// SetBlockchain indicates an expected call of SetBlockchain
func (mr *MockBackendMockRecorder) SetBlockchain(bc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockchain", reflect.TypeOf((*MockBackend)(nil).SetBlockchain), bc)
}




// Close mocks base method
func (m *MockBackend) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockBackendMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBackend)(nil).Stop))
}

// GetCurrentHeightMessages mocks base method
func (m *MockBackend) GetCurrentHeightMessages() []*Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentHeightMessages")
	ret0, _ := ret[0].([]*Message)
	return ret0
}

// GetCurrentHeightMessages indicates an expected call of GetCurrentHeightMessages
func (mr *MockBackendMockRecorder) GetCurrentHeightMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentHeightMessages", reflect.TypeOf((*MockBackend)(nil).GetCurrentHeightMessages))
}
